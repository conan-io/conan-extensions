def options(opt):
	opt.load('compiler_cxx')

def configure(conf):
	conf.load('conan_deps', tooldir='build')
	conf.load('compiler_cxx')

	#flatc will be found in conan cache
	conf.find_program("flatc", var="FLATC")

def build(bld):
	#declare the expected output from flatc
	gen_header = bld.path.get_bld().find_or_declare("generated/car_generated.h")

	#generate headers using our schema
	bld(
		rule = "${FLATC} --cpp -o ${TGT[0].parent} ${SRC}",
		source = "car.fbs",
		target = gen_header
	)

	#compile application
	bld(
		features = "cxx cxxprogram conan",
		source = "main.cpp",
		includes = gen_header.parent.abspath(),
		use = "flatbuffers",
		target = "app"
	)

	#waf's include scanner will detect that 'main.cpp' is importing a file
	#generated by flatc (aka the `target` keyword above), and will ensure
	#proper execution order